/* ПРОГРАММА СЧИТЫВАНИЯ ТЕМПЕРАТУРЫ И ВЫВОД ПОКАЗАНИЙ В ДЕСЯТИЧНОМ ВИДЕ НА ИНДИКАТОР 
Идентификация датчика DS18B20 производится по его ID-коду

Температура выводится на индикатор с точностью до десятых долей градуса

В программе используется 2-строчный 16-символьный индикатор типа HD44780

Перед использованием программы произвести настройку библиотек MicroLan.inc и HD44780.inc

Микроконтроллер		ATtiny2313
Тактовая частота	8 MHz
Индикатор			2-строчный 16-символьный типа HD44780
*/

.include "tn2313def.inc"

.cseg			rjmp	start

ID0:			.db	0x28,0xCC,0x8F,0x52,0x03,0x00,0x00,0x63		;64-битный ID-код DS18B20
ID1:			.db	0x28,0x7B,0x6C,0x81,0x00,0x00,0x00,0x18		;64-битный ID-код DS18B20

.include "MicroLan.inc"						;БИБЛИОТЕКА ПРОТОКОЛА 1-WIRE
.include "HD44780.inc"						;БИБЛИОТЕКА HD4780

start:			ldi		R16,RAMEND
				out		SPL,R16

				Init_HD44780				;Инициализация индикатора

;#### ОСНОВНОЙ ЦИКЛ ####
main:			rcall	Meas_DS1820			;Запуск процесса измерения температуры

				rcall	resLAN
				ldi		R16,0x55			;Команда "Совпадение ПЗУ"
				rcall	wr8LAN
				rcall	Out_ID				;Выдача на линию 8 байт ID-кода
				
				ldi		R16,0xBE			;Команда "Чтение байт блокнотной памяти"
				rcall	wr8LAN	
				
				rcall	rd8LAN				;БАЙТ 0 Младший байт температуры
				mov		ZL,R16

				rcall	rd8LAN				;БАЙТ 1 Старший байт температуры
				mov		ZH,R16
				
				rcall	Convert_Temperature	;Вызов подпрограммы преобразования температуры
				
				First_Line					;Переход на первую строку индикатора
				
				rcall	Print_Tmp			;Вывод температуры на индикатор

				rjmp	main


;#### ЗАПУСК ИЗМЕРЕНИЯ ТЕМПЕРАТУРЫ ####
Meas_DS1820:	rcall	resLAN
				brne	Error_meas_t		;Проверка на отсутствие датчиков на линии
				ldi		R16,0xCC			;Пропуск ПЗУ
				rcall	wr8LAN
				ldi		R16,0x44			;Запуск преобразования
				rcall	wr8LAN	
				rcall	Power_Action		;Активная подтяжка к напряжению питания в течение 750 мс 
Error_meas_t:	ret


;#### ВЫДАЧА ПИТАНИЯ НА ЛИНИЮ В ТЕЧЕНИЕ 750 МС ####
Power_Action:	Wire_UP_Power				;Активная подтяжка к напряжению питания
				ldi		ZH,0x04
				ldi		ZL,0x30
Nxt_Pow_Delay:	rcall	delay_700_us		;Задержка 700 мкс
				Check_Lan					;Считывание вывода
				brcc	Sh_Circ				;Если на выводе ноль, то вывод закорочен на общий проводник
				sbiw	ZL:ZH,1
				brne	Nxt_Pow_Delay
Sh_Circ:		Wire_UP						;Отключение силового уровня питания датчика 
				ret

				
;#### ВЫДАЧА НА ЛИНИЮ 8 БАЙТ ID-КОДА ####
Out_ID:			ldi		ZH,high(ID0*2)		;Загрузка адреса начала 8 байт ID-кода 	
				ldi		ZL,low (ID0*2)
				ldi		R20,8
Nxt_bt_PZU:		lpm		R16,Z+				;Выдача ID-кода на линию
				rcall	wr8LAN
				dec		R20
				brne	Nxt_bt_PZU	
				ret

;#### ВЫВОД ТЕМПЕРАТУРЫ НЕ ИНДИКАТОР ####
Print_Tmp:		sbrs	ZL,7				;Проверка на отрицательное значение
				rjmp	m1
				dat		'-'					;Печать минуса
				rjmp	m3
m1:				sbrs	ZL,4				;Проверка сотен градусов
				rjmp	m2
				dat		'1'					;Печать сотни градусов
				rjmp	m3
m2:				dat		' '					;Печать пробела
m3:				mov		R16,ZH				;Печать десятков и единиц
				rcall	PrHEX
				dat		'.'					;Печать разделительной точки
				mov		R16,ZL
				andi	R16,0x0F
				rcall	jedat30				;Печать десятых градуса
				ret
				
/*##############################################################
				ПРЕОБРАЗОВАНИЕ ТЕМПЕРАТУРЫ
  
НА ВХОДЕ:	СТАРШИЙ БАЙТ ТЕМПЕРАТУРЫ	ZH
			МЛАДШИЙ БАЙТ ТЕМПЕРАТУРЫ	ZL

НА ВЫХОДЕ:	ЗНАК ТЕМПЕРАТУРЫ:			7-Й БИТ ZL
			СОТНИ ГРАДУСОВ:				4-Й БИТ ZL
			ДЕСЯТКИ ГРАДУСОВ:			СТАРШАЯ ТЕТРАДА ZH
			ЕДИНИЦЫ ГРАДУСОВ:			МЛАДШАЯ ТЕТРАДА ZH
			ДЕСЯТЫЕ ДОЛИ:				МЛАДШАЯ ТЕТРАДА ZL
##############################################################*/

Convert_Temperature:
				bst		ZH,7				;В флаг Т переносим бит знака
				brtc	Pozitiv_Tmp			;Если Т = 0, то температура положительна
				com		ZL					;Переводим 16-разрядное число в дополнительный код
				com		ZH					;Поразрядная инверсия 16-разрядного числа
				adiw	ZL:ZH,1				;Увеличение 16-разрядного числа на 1
Pozitiv_Tmp:	rcall	convert				;Вызов подпрограммы преобразования температуры
				bld		ZL,7				;В 7-й бит ZL заносим знак температуры из бита Т
				ret
			
;ПОДПРОГРАММА ПРЕОБРАЗОВАНИЯ ТЕМПЕРАТУРЫ
convert:		rol		ZL					;Сдвиг старшей тетрады регистра ZL в младшую тетраду регистра ZH
				rol		ZH
				rol		ZL
				rol		ZH
				rol		ZL
				rol		ZH
				rol		ZL
				rol		ZH
				swap	ZL					;Дробную часть помещаем в младшую тетраду ZL
				rcall	fract_part			;Вычисление десятых долей градуса
				rcall	integer_part		;Вычисление сотен, десятков и единиц
				ret
				
;ВЫЧИСЛЕНИЕ ДРОБНОЙ ЧАСТИ (Умножение на 5 (10) и Деление на 8 (16))
fract_part:		andi	ZL,0x0F				;Выделение младшей тетрады 
				mov		R16,ZL				;Сохраняем в R16 значение ZL
				lsl		ZL					;ZL*2		
				lsl		ZL					;ZL*2
				add		ZL,R16				;ZL+R16
				lsr		ZL					;ZL/2
				lsr		ZL					;ZL/2
				lsr		ZL					;ZL/2
				ret

;ВЫЧИСЛЕНИЕ ЦЕЛОЙ ЧАСТИ
integer_part:	clr		R16					;Обнуляем регистр подсчета десятков
				cpi		ZH,100
				brcs	calc_10				;Если число меньше 100, то переход по метке calc_10
				subi	ZH,100				;Уменьшаем ZH на 100
				sbr		ZL,(1<<4)			;В 4-й бит ZL заносим сотни градусов
calc_10:		cpi		ZH,10				;Вычисление десятков (деление на 10)
				brcs	tens_END			;Если значение в ZH меньше 10, то переход на tens_END
				subi	ZH,10				;Уменьшаем ZH на 10
				inc		R16					;Увеличиваем значение десятков
				rjmp	calc_10
tens_END:		swap	R16					;Перемещение десятков в старшую тетраду R16
				or		ZH,R16				;Объединение десятков и единиц в регистре ZH
				ret


