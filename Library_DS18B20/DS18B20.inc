/*					БИБЛИОТЕКА ДЛЯ РАБОТЫ С ТЕМПЕРАТУРНЫМ ДАТЧИКОМ DS18B20

	Используются регистры R16, R17, R18, YL, YH, ZL, ZH, 9 байт памяти данных начиная с указанного адреса.
	Перед использованием этой библиотеки провести настройку библиотеки MicroLan.inc
	Перед использованием макросов Rd_one_Tmp или Rd_Tmp_PZU для измерения температуры, микросхемы DS18B20 должны быть инициализированны макросами Set_Reg_RAM или Set_Reg_EEP
	Библиотека расчитана на работу датчиков DS18B20 по схеме с паразитным питанием
	
	Set_Reg_RAM		AA,BB,CC
	Макрос для задания данных в регистрах Th = AA и Tl = BB. Параметр СС задает разрядность и время преобразования температуры (СС = 9..12)
	
	Set_Reg_EEP		AA,BB,CC
	Макрос для записи в регистры EEPROM данных Th = AA и Tl = BB. Параметр СС задает разрядность и время преобразования температуры (СС = 9..12)

	Rd_one_Tmp		AA
	Макрос считывания показаний температуры с ОДНОГО датчика, без указания ID-кода.
	В качестве аргумента необходимо указать начальный адрес в памяти данных, начиная с которого будут записываться 9 байт блокнотной памяти.
	Измеренное значение температуры находится в упакованном виде в регистрах ZL и ZH (см. упакованные результаты измеренной температуры)
	После выполнения макроса, флаг Т содержит информацию о ошибках: Т=0 - ошибок нет, Т=1 - ошибка измерения
	Код ошибки содержится в регистре R16: 1-отсутствие датчиков, 2-замыкание линии, 3-ошибка CRC
	Длительность процесса измерения определяется подпрограммой Power_Action. 
	
	Rd_Tmp_PZU		АА, ВВ
	Макрос считывания показаний температуры с того датчика, чей ID указан в аргументе ВВ.
	В качестве аргумента АА необходимо указать начальный адрес в памяти данных, начиная с которого будут записываться 9 байт блокнотной памяти.
	Измеренное значение температуры находится в упакованном виде в регистрах ZL и ZH (см. упакованные результаты измеренной температуры)
	После выполнения макроса, флаг Т содержит информацию о ошибках: Т=0 - ошибок нет, Т=1 - ошибка измерения
	Код ошибки содержится в регистре R16: 1-отсутствие датчиков, 2-замыкание линии, 3-ошибка CRC
	
	УПАКОВАННЫЕ РЕЗУЛЬТАТЫ ИЗМЕРЕННОЙ ТЕМПЕРАТУРЫ:
	ЗНАК ТЕМПЕРАТУРЫ:			7-Й БИТ ZL
	СОТНИ ГРАДУСОВ:				4-Й БИТ ZL
	ДЕСЯТКИ ГРАДУСОВ:			СТАРШАЯ ТЕТРАДА ZH
	ЕДИНИЦЫ ГРАДУСОВ:			МЛАДШАЯ ТЕТРАДА ZH
	ДЕСЯТЫЕ ДОЛИ:				МЛАДШАЯ ТЕТРАДА ZL
	
*/
		
;#### БИБЛИОТЕКА ПРОТОКОЛА Micro Lan ####
.include "MicroLan.inc"


;#### ВЫДАЧА НА ЛИНИЮ КОМАНДЫ ####
.macro			WLAN
				ldi		R16,@0
				rcall	wr8LAN
.endm


;ИНИЦИАЛИЗАЦИЯ ДАТЧИКОВ ТЕМПЕРАТУРЫ DS18B20
;Загрузка в регистры RAM значений регистров Th, Tl, РАЗРЯДНОСТЬ ПРЕОБРАЗОВАНИЯ (9..12)
.macro			Set_Reg_RAM

;9 - РАЗРЯДНОЕ ПРЕОБРАЗОВАНИЕ:
				.if					@2==9
					.equ			Delay_Measure_DS18B20 	= 0x0430/8		;Константа, определяющая время измерения температуры (~100 ms)
					.equ			K_Res					= 0b00011111	;Константа, определяющая разрядность преобразования DS18B20
				.endif
;10 - РАЗРЯДНОЕ ПРЕОБРАЗОВАНИЕ:
				.if 				@2==10
					.equ			Delay_Measure_DS18B20 	= 0x0430/4		;Константа, определяющая время измерения температуры (~190 ms)
					.equ			K_Res					= 0b00111111	;Константа, определяющая разрядность преобразования DS18B20
				.endif
;11 - РАЗРЯДНОЕ ПРЕОБРАЗОВАНИЕ:
				.if 				@2==11
					.equ			Delay_Measure_DS18B20 	= 0x0430/2		;Константа, определяющая время измерения температуры (~380 ms)
					.equ			K_Res					= 0b01011111	;Константа, определяющая разрядность преобразования DS18B20
				.endif
;12 - РАЗРЯДНОЕ ПРЕОБРАЗОВАНИЕ:
				.if 				@2==12
					.equ			Delay_Measure_DS18B20 	= 0x0430/1		;Константа, определяющая время измерения температуры (~750 ms)
					.equ			K_Res					= 0b01111111	;Константа, определяющая разрядность преобразования DS18B20
				.endif
;НЕВЕРНОЕ ЗАДАНИЕ РАЗРЯДНОСТИ ПРЕОБРАЗОВАНИЯ:			
				.if					((@2!=9)&&(@2!=10)&&(@2!=11)&&(@2!=12))
					.equ			Delay_Measure_DS18B20 	= 0x0430/8		;Константа, определяющая время измерения температуры (~100 ms)
					.equ			K_Res					= 0b00011111	;Константа, определяющая разрядность преобразования DS18B20
					.error 			"The third argument macros Set_Reg_RAM must be an integer from 9 to 12. For details, see the library DS18B20.inc !"
				.endif

				clt							;Предварительный сброс флага ошибки
				rcall	resLAN
				brne	Init_DS_ERR			;Проверка на отсутствие датчиков на линии
				WLAN	0xCC				;Пропуск ПЗУ
				WLAN	0x4E				;КОМАНДА НА ЗАПИСЬ 3 БАЙТ БЛОКНОТНОЙ ПАМЯТИ
				WLAN	@0					;ЗНАЧЕНИЕ РЕГИСТРА Th
				WLAN	@1					;ЗНАЧЕНИЕ РЕГИСТРА Tl
				WLAN	K_Res				;ЗНАЧЕНИЕ РЕГИСТРА КОНФИГУРАЦИИ	
				rjmp	PC+2
Init_DS_ERR:	set							;Установка флага ошибки
.endm



;ИНИЦИАЛИЗАЦИЯ ДАТЧИКОВ ТЕМПЕРАТУРЫ DS18B20
;Запись в регистры EEPROM-памяти значений регистров Th, Tl, РАЗРЯДНОСТЬ ПРЕОБРАЗОВАНИЯ (9..12)
.macro			Set_Reg_EEP

;9 - РАЗРЯДНОЕ ПРЕОБРАЗОВАНИЕ:
				.if					@2==9
					.equ			Delay_Measure_DS18B20 	= 0x0430/8		;Константа, определяющая время измерения температуры (~100 ms)
					.equ			K_Res					= 0b00011111	;Константа, определяющая разрядность преобразования DS18B20
				.endif
;10 - РАЗРЯДНОЕ ПРЕОБРАЗОВАНИЕ:
				.if 				@2==10
					.equ			Delay_Measure_DS18B20 	= 0x0430/4		;Константа, определяющая время измерения температуры (~190 ms)
					.equ			K_Res					= 0b00111111	;Константа, определяющая разрядность преобразования DS18B20
				.endif
;11 - РАЗРЯДНОЕ ПРЕОБРАЗОВАНИЕ:
				.if 				@2==11
					.equ			Delay_Measure_DS18B20 	= 0x0430/2		;Константа, определяющая время измерения температуры (~380 ms)
					.equ			K_Res					= 0b01011111	;Константа, определяющая разрядность преобразования DS18B20
				.endif
;12 - РАЗРЯДНОЕ ПРЕОБРАЗОВАНИЕ:
				.if 				@2==12
					.equ			Delay_Measure_DS18B20 	= 0x0430/1		;Константа, определяющая время измерения температуры (~750 ms)
					.equ			K_Res					= 0b01111111	;Константа, определяющая разрядность преобразования DS18B20
				.endif
;НЕВЕРНОЕ ЗАДАНИЕ РАЗРЯДНОСТИ ПРЕОБРАЗОВАНИЯ:
				.if					((@2!=9)&&(@2!=10)&&(@2!=11)&&(@2!=12))
					.equ			Delay_Measure_DS18B20 	= 0x0430/8		;Константа, определяющая время измерения температуры (~100 ms)
					.equ			K_Res					= 0b00011111	;Константа, определяющая разрядность преобразования DS18B20
					.error 			"The third argument macros Set_Reg_EEP must be an integer from 9 to 12. For details, see the library DS18B20.inc !"
				.endif
				
				clt							;Предварительный сброс флага ошибки
				rcall	resLAN
				brne	Init_DS_ERR			;Проверка на отсутствие датчиков на линии
				WLAN	0xCC				;Пропуск ПЗУ
				WLAN	0x4E				;КОМАНДА НА ЗАПИСЬ 3 БАЙТ БЛОКНОТНОЙ ПАМЯТИ
				WLAN	@0					;ЗНАЧЕНИЕ РЕГИСТРА Th
				WLAN	@1					;ЗНАЧЕНИЕ РЕГИСТРА Tl
				WLAN	K_Res				;ЗНАЧЕНИЕ РЕГИСТРА КОНФИГУРАЦИИ	
				rcall	resLAN
				brne	Init_DS_ERR			;Проверка на отсутствие датчиков на линии
				WLAN	0xCC				;Пропуск ПЗУ
				WLAN	0x48				;Запись блокнотной памяти в eeprom
				ldi		ZH,high(0x0030)
				ldi		ZL,low (0x0030)
				rcall	Power_Action		;Активная подтяжка к напряжению питания в течение ~30 мс
				rjmp	PC+2
Init_DS_ERR:	set							;Установка флага ошибки
.endm

;ЗАПУСК ПРЕОБРАЗОВАНИЯ И СЧИТЫВАНИЯ ТЕМПЕРАТУРЫ С ОДНОГО ДАТЧИКА
.macro			Rd_one_Tmp
				rcall	resLAN
				brne	Error_meas			;Проверка на отсутствие датчиков на линии
				WLAN	0xCC				;Пропуск ПЗУ
				WLAN	0x44				;Запуск преобразования
				ldi		ZH,high(Delay_Measure_DS18B20)
				ldi		ZL,low (Delay_Measure_DS18B20)
				rcall	Power_Action		;Подача на линию напряжения питания в течение времени, определяемого константой Delay_Measure_DS18B20
				ldi		YH,high(@0)
				ldi		YL,low (@0)
				rcall	resLAN
				brne	Error_meas			;ПРОВЕРКА НА ОТСУТСТВИЕ ДАТЧИКОВ НА ЛИНИИ
				rcall	Read_one_TMP		;Считывание температуры с одного датчика на линии
				ldi		YH,high(@0)
				ldi		YL,low (@0)
				ldd		ZL,Y+0				;Сохранение в ZL значения младшего байта температуры
				ldd		ZH,Y+1				;Сохранение в ZH значения старшего байта температуры
				rcall	Checksum			;Расчет контрольной суммы
				ldi		R16,3				;Ошибка номер 3 - ошибка CRC
				brne	Error_meas			;Если флаг Z = 0, то контрольная сумма не верна
				rcall	Convert_Temperature	;Преобразование считанной температуры
				clt							;Cброс флага ошибки
				rjmp	PC+2
Error_meas:		set							;Установка флага ошибки
.endm

;ЗАПУСК ПРЕОБРАЗОВАНИЯ И СЧИТЫВАНИЯ ТЕМПЕРАТУРЫ С УКАЗАННОГО ID-КОДА ДАТЧИКА
.macro			Rd_Tmp_PZU
				rcall	resLAN
				brne	Error_meas			;Проверка на отсутствие датчиков на линии
				WLAN	0xCC				;Пропуск ПЗУ
				WLAN	0x44				;Запуск преобразования
				ldi		ZH,high(Delay_Measure_DS18B20)
				ldi		ZL,low (Delay_Measure_DS18B20)
				rcall	Power_Action		;Подача на линию напряжения питания в течение времени, определяемого константой Delay_Measure_DS18B20
				ldi		YH,high(@0)
				ldi		YL,low (@0)
				rcall	resLAN
				brne	Error_meas			;ПРОВЕРКА НА ОТСУТСТВИЕ ДАТЧИКОВ НА ЛИНИИ
				ldi		ZH,high(@1*2)
				ldi		ZL,low (@1*2)
				rcall	Read_any_TMP		;Считывание температуры с выбранного датчика
				ldi		YH,high(@0)
				ldi		YL,low (@0)
				ldd		ZL,Y+0				;Сохранение в ZL значения младшего байта температуры
				ldd		ZH,Y+1				;Сохранение в ZH значения старшего байта температуры
				rcall	Checksum			;Расчет контрольной суммы
				ldi		R16,3				;Ошибка номер 3 - ошибка CRC
				brne	Error_meas			;Если флаг Z = 0, то контрольная сумма не верна
				rcall	Convert_Temperature	;Преобразование считанной температуры
				clt							;Cброс флага ошибки
				rjmp	PC+2
Error_meas:		set							;Установка флага ошибки
.endm


;МЛАДШИЙ БАЙТ ЗНАЧЕНИЯ ТЕМПЕРАТУРЫ		ZL  
;СТАРШИЙ БАЙТ ЗНАЧЕНИЯ ТЕМПЕРАТУРЫ		ZH
;РЕГИСТР R16 - КОНТРОЛЬ ОШИБОК, R16 = 0 - ОШИБОК НЕТ
Read_any_TMP:	rcall	Choice_PZU_from_FLASH		;Выбор датчика по номеру ID
				rjmp	RD_tmp
Read_one_TMP:	WLAN	0xCC						;Команда пропуск ПЗУ					
RD_tmp:			WLAN	0xBE						;Чтение байт блокнотной памяти
				ldi		ZL,9						;Чтение 8 байт блокнотной памяти + 1 байт CRC
				rcall	rd8LAN
				st		Y+,R16
				dec		ZL
				brne	PC-3
				ret					
			
Power_Action:			Wire_UP_Power			;Активная подтяжка к напряжению питания
Nxt_Pow_Delay:			rcall	delay_700_us	;Задержка 700 мкс
						Check_Lan				;Считывание вывода
						brcc	Sh_Circ			;Если на выводе ноль, то вывод закорочен на общий проводник
						sbiw	ZL:ZH,1
						brne	Nxt_Pow_Delay
Sh_Circ:				Wire_UP					;Отключение силового уровня питания датчика 
						ret
						
;ПОДПРОГРАММА ВЫБОР ДАТЧИКА
Choice_PZU_from_FLASH:	WLAN	0x55			;Выбор ПЗУ датчика
						push	YL
						ldi		YL,8
Nxt_bt_PZU:				lpm		R16,Z+			;Выдача адреса ПЗУ на линию
						rcall	wr8LAN
						dec		YL
						brne	Nxt_bt_PZU
						pop		YL
						ret
				
				
/*################################################################################						
						ПОДСЧЕТ КОНТРОЛЬНОЙ СУММЫ
			
Исходные байты должны быть записаны подряд в ячейках памяти данных, начиная с 
МЛАДШЕГО байта. До выполнения Сhecksum адрес расположения младшего байта должен 
быть загружен в регистр Z. Если в подсчете CRC присутствует байт CRC, то после 
выполнения Сhecksum в регистре R16 будет 0.

								! ВНИМАНИЕ ! 
После выполнения Сhecksum данные в указаных 9 ячейках памяти будут ПОТЕРЯНЫ !
################################################################################*/

Checksum:	ldi		R18,(8*9)		;Записать количество бит (8*байт) по которым идет подсчет CRC
			clr		R16				;Обнуление регистра R16
Nxt_Shift:	
.macro		Shift_R					;Макрос сдвига ячейки памяти вправо на 1 бит, через флаг переноса
			ldd		R17,Y+@0
			ror		R17
			std		Y+@0,R17
.endm
			Shift_R	8				;Сдвиг 9 ячеек памяти данных на 1 бит вправо
			Shift_R	7				
			Shift_R	6
			Shift_R	5
			Shift_R	4
			Shift_R	3
			Shift_R	2
			Shift_R	1
			Shift_R	0
			ldi		R17,0b10000000	;Константа для инвертирования флага С (сдвинутого в 7-й бит R16)
			ror		R16				;Сдвиг бита С в 7-й разряд, 0-й разряд сдвигается в бит С
			brcc	PC+2			;Если нулевой разряд R16 равен 1, 
			eor		R16,R17			;то инвертируем старший разряд (флаг С)
			ldi		R17,0b00001100	;Константа для инвертирования 2 и 3 битов (3 и 4 до сдвига R16)
			sbrc	R16,7			;Если седьмой разряд (флаг С после "исключающего или" между С и 0-м битом R16) равен 1,
			eor		R16,R17			;то инвертируем 2 и 3 разряды (3 и 4 до сдвига R16)
			dec		R18				;Уменьшаем счетчик
			brne	Nxt_Shift
			tst		R16				;Проверка R16 на нулевое значение (R16=0 при подсчете CRC вместе с байтом CRC)
			ret


/*##############################################################
				ПРЕОБРАЗОВАНИЕ ТЕМПЕРАТУРЫ
  
НА ВХОДЕ:	СТАРШИЙ БАЙТ ТЕМПЕРАТУРЫ	ZH
			МЛАДШИЙ БАЙТ ТЕМПЕРАТУРЫ	ZL

НА ВЫХОДЕ:	ЗНАК ТЕМПЕРАТУРЫ:			7-Й БИТ ZL
			СОТНИ ГРАДУСОВ:				4-Й БИТ ZL
			ДЕСЯТКИ ГРАДУСОВ:			СТАРШАЯ ТЕТРАДА ZH
			ЕДИНИЦЫ ГРАДУСОВ:			МЛАДШАЯ ТЕТРАДА ZH
			ДЕСЯТЫЕ ДОЛИ:				МЛАДШАЯ ТЕТРАДА ZL
*/##############################################################

Convert_Temperature:
				bst		ZH,7			;В флаг Т переносим бит знака
				brtc	Pozitiv_Tmp		;Если Т = 0, то температура положительна
				com	ZL					;Переводим 16-разрядное число в дополнительный код
				com	ZH					;Поразрядная инверсия 16-разрядного числа
				adiw	ZL:ZH,1			;Увеличение 16-разрядного числа на 1
Pozitiv_Tmp:	rcall	convert			;Вызов подпрограммы преобразования температуры
				bld		ZL,7			;В 7-й бит ZL заносим знак температуры из бита Т
				ret
			
;ПОДПРОГРАММА ПРЕОБРАЗОВАНИЯ ТЕМПЕРАТУРЫ
convert:		rol		ZL				;Сдвиг старшей тетрады регистра ZL в младшую тетраду регистра ZH
				rol		ZH
				rol		ZL
				rol		ZH
				rol		ZL
				rol		ZH
				rol		ZL
				rol		ZH
				swap	ZL
				rcall	fract_part		;Вычисление десятых долей градуса
				rcall	integer_part	;Вычисление сотен, десятков и единиц
				ret
				
;ВЫЧИСЛЕНИЕ ДРОБНОЙ ЧАСТИ (Умножение на 5 (10) и Деление на 8 (16))
fract_part:		andi	ZL,0x0F			;Выделение младшей тетрады 
				mov		R16,ZL			;Сохраняем в R16 значение ZL
				lsl		ZL				;ZL*2		
				lsl		ZL				;ZL*2
				add		ZL,R16			;ZL+R16
				lsr		ZL				;ZL/2
				lsr		ZL				;ZL/2
				lsr		ZL				;ZL/2
				ret

;ВЫЧИСЛЕНИЕ ЦЕЛОЙ ЧАСТИ
integer_part:	clr		R16				;Обнуляем регистр подсчета десятков
				cpi		ZH,100
				brcs	calc_10			;Если число меньше 100, то переход по метке calc_10
				subi	ZH,100			;Уменьшаем ZH на 100
				sbr		ZL,(1<<4)		;В 4-й бит ZL заносим сотни градусов
calc_10:		cpi		ZH,10			;Вычисление десятков (деление на 10)
				brcs	tens_END		;Если значение в ZH меньше 10, то переход на tens_END
				subi	ZH,10			;Уменьшаем ZH на 10
				inc		R16				;Увеличиваем значение десятков
				rjmp	calc_10
tens_END:		swap	R16				;Перемещение десятков в старшую тетраду R16
				or		ZH,R16			;Объединение десятков и единиц в регистре ZH
				ret
