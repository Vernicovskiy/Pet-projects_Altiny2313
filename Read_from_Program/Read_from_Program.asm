/*
СЧИТЫВАНИЕ ДАННЫХ ИЗ ПАМЯТИ ПРОГРАММ
*/
.include "tn2313def.inc"

.def	temp	=R16

/*Память программ состоит из 16-разрядных слов. Для адресации байтов используется альтернативная адресация,
в которой каждый байт имеет свой адрес. Каждое слово состоит из 2 байт, следовательно, адрес первого байта 
в слове равен удвоенному адресу слова, а адрес второго равен (удвоенный адрес слова) + 1 */
		
		
		ldi		ZH,high(text3*2)	;В регистр Z загружен увеличенный в 2 раза адрес метки text3 (0x47*2)
		ldi		ZL,low (text3*2)
;ИЛИ
		ldi		ZH,high(text3<<1)	;Поразрядный сдвиг числа на 1 бит вправо равносилен умножению на 2
		ldi		ZL,low (text3<<1)
;ИЛИ
		clr		ZH					;Можно самостоятельно посчитать расположение интересующего байта в памяти программ
		ldi		ZL,0x8E


		lpm		temp,Z				;0x56	Команда загрузки без инкримента Z
		adiw	ZL,1				;Z+1

		lpm		temp,Z+				;0xF5	Команда загрузки с инкриментом Z
		lpm		temp,Z+				;0x00
		lpm		temp,Z+				;0xA2

		lpm		temp,Z+				;0x54 - код символа 'T'
		lpm		temp,Z+				;0x65 - код символа 'e'

		lpm							;Загрузка в регистр R0 кода 0x73 (символ 's')
		
		adiw	ZL,2				;Значение в регистре Z увеличено на 2
		lpm		temp,Z+				;0xF4   Загружен первый байт по метке text5
		lpm		temp,Z+				;0x56


		
		ldi		ZH,high(text8*2+13)	;В регистр Z загружен адрес text8 * 2 + 13 = 0x5D*2 + 13 = 0xC7
		ldi		ZL,low (text8*2+13)

		lpm		temp,Z+				;0x5C	'\'
		lpm		temp,Z+				;0x2A	'*'
		lpm		temp,Z+				;0x00	16-й байт
		lpm		temp,Z+				;0x5C	Первый байт метки text9
		lpm		temp,Z+				;0x00	Второй байт метки text9
		lpm		temp,Z+				;0xFF	Пустое пространство памяти программ
		lpm		temp,Z+				;0xFF	Пустое пространство памяти программ
		lpm		temp,Z+				;0xFF	Пустое пространство памяти программ
		lpm		temp,Z+				;0xFF	Пустое пространство памяти программ


			
		ldi		ZH,high((text10+1)*2)	;Загрузка адреса расположения байта text7*2
		ldi		ZL,low ((text10+1)*2)
		
		lpm		YL,Z+					;Считывание в регистр Y байта text7*2
		lpm		YH,Z+

		mov		ZL,YL
		mov		ZH,YH

		lpm		temp,Z+					;Загрузка первого байта (0x30,'0') по адресу text7*2
		lpm		temp,Z+					;Загрузка второго байта (0x78,'x') по адресу text7*2



		ldi		ZH,high((text10+2)*2)	;Загрузка адреса расположения байта (text6<<1)+1
		ldi		ZL,low ((text10+2)*2)
		
		lpm		YL,Z+					;Считывание в регистр Y байта (text6<<1)+1
		lpm		YH,Z+

		mov		ZL,YL
		mov		ZH,YH

		lpm		temp,Z+					;Загрузка 1 байта (0x69,'i') по адресу (text6<<1)+1
		lpm		temp,Z+					;Загрузка 2 байта (0x21,'!') по адресу (text6<<1)+2
		lpm		temp,Z+					;Загрузка 3 байта (0x20,' ') по адресу (text6<<1)+3
		lpm		temp,Z+					;Загрузка 4 байта (0x49,'I') по адресу (text6<<1)+4


		
		ldi		ZH,high(main*2)
		ldi		ZL,low (main*2)
		
		lpm		temp,Z+					;В регистр temp записан первый байт команды "rjmp	main"
		lpm		temp,Z+					;В регистр temp записан второй байт команды "rjmp	main"
		lpm		temp,Z+					;В регистр temp записан первый байт команды "inc R16"
		lpm		temp,Z+					;В регистр temp записан второй байт команды "inc R16"
		lpm		temp,Z+					;0x41	Первый байт по метке text0
		lpm		temp,Z+					;0x41	Второй байт по метке text0



		ldi		ZH,high(cmd*2)
		ldi		ZL,low (cmd*2)
cmd:	lpm		R16,Z+					;В регистр R16 считался первый байт кода комманды "lpm  R16,Z+"
		lpm		R17,Z					;В регистр R17 считался второй байт кода комманды "lpm  R16,Z+"

		
.db		0x1F,0xEF						;ldi  R17,0xFF
.dw		0x2F01							;mov  R16,R17


main:	rjmp	main
		inc		R16


;Записывать данные в память программ можно в разных системах счисления, в том числе и в ASCII кодах:
text0:
.db		0x41, 65, 0b1000001, 'A' 			;В программной памяти 4 раза записано одно и то же число


text1:
.db		0x56, 0xF5							;В программной памяти будет записан байт 0xF556
.db		0x7F, '%'							;В программной памяти будет записан байт 0x257F
.db		0x82, " "							;В программной памяти будет записан байт 0x2082

;Для переноса используется символ \
;Но если используется символ переноса, то такая строка не может быть прокомментирована
text2:		.db		0x56, 0xF5, 0x00, 0xA2, \
					0x0E, 0x42,	\
					0x11, 0xA8				


text3:		.db		0x56, 0xF5, 0x00, 0xA2


text4:		.db		'T', 'e', 's', 't'		;Запись по одному ASCII-символу (по одному байту)


;Так же можно записывать данные пословно (16-разрядные числа)
text5:		.dw		0x56F4, 35246, 0b0011011010011100, 'S'
			.dw		0b1001101101, 46345
			.dw		0x78					;байт 0x0078. Такая запись не выдает предупреждения


text6:		.db		"Hi! It's Me!"			;Запись длинного сообщения в ASCII коде


text7:		.db		"0x11, 0xA8"			;Байты будут записаны как текст в ASCII коде


text8:		.db		"()'^;:_#@%&.!\*"		;15 символов в ASCII кодах. 16-й байт 0x00 (после байта *)
;					              ^14 символ (14-й байт)


;Если запись ведется побайтно, то число байтов должно быть 
;четным, иначе ассемблер дополнит последний байт значением 0x00
text9:		.db		0x5C


.org	0x0090								;Последующие байты размещать начиная с адреса 0x0090


text10:		.dw		text8,text7*2,(text6<<1)+1


.org	0x00A0								;Последующие байты размещать начиная с адреса 0x00A0

;Длинное сообщение в несколько строк с переносами
text11:		.db		"I "				\
					"pull out "			\
					"of wide leg "		\
					"duplicate "		\
					"precious cargo. "	\
					"Read, "			\
					"envy, "			\
					"I - "				\
					"citizen "			\
					"The Soviet Union."	




