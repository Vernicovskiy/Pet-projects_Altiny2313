.include "tn2313def.inc"

.def	temp	=R16
.def	temp2	=R17

		ldi		temp,99.99999999999		;Дробная часть будет отброшена. В регистр будет загружено 99 (0x63)

.equ	numb_1	=12.35					;numb_1 = 12
.equ	numb_2	=0.99999				;numb_2 = 0

		ldi		temp,numb_2*numb_1		;В регистр temp будет загружен ноль

.equ	Const_1	=(25 + 0x1A/3 + 0b00000100*3*numb_1 - numb_2 - 0x0F)	;

		ldi		temp,Const_1

		ldi		temp,(25 + 0x1A/3 + 0b00000100*3 - 0x0F)
		ldi		temp,(184/3)			;В регистр загрузилось 61
;		ldi		temp,(187/2*4)			;ОШИБКА! значение больше 0хFF (255)
		ldi		temp,(187/(2*4))

;---------------------
		ldi		temp,high(0x1234)		;Загрузили старший байт числа (0x12)
		ldi		temp2,low(0x1234)		;Загрузили младший байт числа (0x34)
;---------------------
.equ	const3	=987*7.5679 			;987*7.5679 = 7469 = 0x1D2D
		ldi		temp,high(const3)		;Загрузили старший байт числа
		ldi		temp2,low(const3)		;Загрузили младший байт числа
		nop
		
		ldi		temp,-34				;В регистр temp загружен байт (отрицательное число -34)

		ldi		R17,byte1(0x12345678)	;В регистр R16 загружен байт 0x78
		ldi		R18,byte2(0x12345678)	;В регистр R17 загружен байт 0x56
		ldi		R19,byte3(0x12345678)	;В регистр R18 загружен байт 0x34
		ldi		R20,byte4(0x12345678)	;В регистр R19 загружен байт 0x12

		ldi		temp,'A'				;В регистр temp загружен байт 0x41 (ascii код буквы A)
		ldi		temp,'g'				;В регистр temp загружен байт 0x67 (ascii код буквы g)

;---------------------
		ldi		temp,~0b11110000 		;Инверсия константы
		nop
;---------------------
.equ	Z0		=0
.equ	Z1		=1
.equ	Z2		=2

;РАВНО ==
		ldi		temp,(Z1==Z1)			;Условие Z1==Z1 выполняется => реультатом будет 1
		ldi		temp,(Z1==Z2)			;Условие Z1==Z1 НЕвыполняется => реультатом будет 0

;НЕРАВНО !=
		ldi		temp,(Z1!=Z2)			;Условие Z1!=Z1 выполняется => реультатом будет 1

;БОЛЬШЕ >
		ldi		temp,(Z1>Z2)			;Условие Z1>Z1 НЕвыполняется => реультатом будет 0

;ОТРИЦАНИЕ !
		ldi		temp,!(Z1>Z2)			;Условие Z1>Z1 НЕвыполняется => реультатом будет !(0) = 1



;Поразрядный сдвиг чисел
		ldi		temp,(0b00001100<<3)	;Число сдвинутое на три разряда вправо 0b01100000
		ldi		temp,(0b00001100<<1)	;Число сдвинутое на один разряд вправо 0b00011000
		ldi		temp,(0b00001100>>3)	;Число сдвинутое на один разряд вправо 0b00000001
		ldi		temp,(0b00001100>>1)	;Число сдвинутое на один разряд вправо 0b00000110

;СДВИГ ВПРАВО ЭКВИВАЛЕНТЕН ДЕЛЕНИЮ НА 2
;СДВИГ ВЛЕВО ЭКВИВАЛЕНТЕН УМНОЖЕНИЮ НА 2
		ldi		temp,4<<3				;4*2^3 = 32 (0x20)
		ldi		temp,555>>3				;555/2^3 = 69,375 = 69 (0x45)


.equ	BIT_Reg	=6
		ldi		temp,(1<<BIT_Reg)	;Единица сдвинутая на 6 разрядов влево = установка в 1 шестого разряда
		nop
		ldi		temp,(1<<0)			;Единица сдвинутая на 0 разрядов влево = установка в 1 нулевого разряда
		nop
		ldi		temp,exp2(3)		;В регистр загружено 2^3 = 8 = 0b00001000 (то же самое что и (1<<3))
		nop
		ldi		temp,exp2(BIT_Reg) 	;В регистр загружено 2^6 = 64 = 0b001000000 (то же самое что и (1<<6))
		nop
		ldi		temp,(8>>3)			;Число 8 (0b00001000) сдвинуто на 3 разряда вправо



		ldi		temp,(1<<3|1<<5) 		;ldi temp,0b00101000
;Единицу сдвинули на 3 разряда влево затем операцией поразрядного "или" 
;объединили с числом, в котором единица сдвинута на 5 разрядов влево

	;	ldi		temp,(1<<3 + 1<<5) 		;ldi temp,0b00101000
		ldi		temp,(1<<3)|(1<<5) 		;ldi temp,0b00101000
		ldi		temp,(1<<3)+(1<<5) 		;ldi temp,0b00101000
		nop
		ldi		temp,(1<<3|1<<5|1<<0) 	;ldi temp,0b00101001
		nop

		ldi		temp,0b11110000 & 0b10101110	;Поразрядное логическое умножение 
		 
		ser		temp
		cbr		temp,(1<<3) 			;сбросили 3-й бит
		cbr		temp,exp2(4) 			;сбросили 4-й бит
		nop
		clr		temp
		sbr		temp,(1<<0) 			;установили 0-й бит
		sbr		temp,exp2(7) 			;установили 7-й бит
		nop
;---------------------
.equ	bit_4	=4
		ser		temp
		cbr		temp,(1<<bit_4)			;сбросили 4-й бит
		nop
		sbr		temp,(1<<bit_4)			;установили 4-й бит

;---------------------
.equ	bit_5	=5
		ser		temp
		cbr		temp,(1<<bit_4|1<<bit_5);сбросили 4-й и 5-й бит
		ser		temp
		cbr		temp,(0<<bit_5|1<<bit_4);Сбросился только 4 бит
		ser		temp
		cbr		temp,(0<<bit_5|0<<bit_4);Регистр остался без изменений
		nop
;---------------------
		clr		temp
		sbr		temp,(1<<bit_4|1<<bit_5);установили 4-й и 5-й бит
		nop

zzz:	rjmp	zzz
