/* 		БИБЛИОТЕКА ЧАСОВ РЕАЛЬНОГО ВРЕМЕНИ DS1307

Перед использованием библиотеки произвести настройку 
подключаемой библиотеки протокола i2c

В библиотеке используются регистры R16 и R17

Чтение и запись осуществляются в 7 ячеек памяти данных:
СЕКУНДЫ		DATA+0	;Старшая тетрада - десятки секунд (0..5), мадшая тетрада - единицы секунд (0..9)
МИНУТЫ		DATA+1	;Старшая тетрада - десятки минут (0..5), мадшая тетрада - единицы минут (0..9)
ЧАСЫ		DATA+2	;Старшая тетрада - десятки часов (0..2), мадшая тетрада - единицы часов (0..9)
ДЕНЬ НЕДЕЛИ	DATA+3	;Старшая тетрада - нули, мадшая тетрада - дни недели (1..7)
ЧИСЛО		DATA+4	;Старшая тетрада - десятки числа (0..3), мадшая тетрада - единицы числа (0..9)
МЕСЯЦ		DATA+5	;Старшая тетрада - десятки месяца (0..1), мадшая тетрада - единицы месяца (0..9)
ГОД			DATA+6	;Старшая тетрада - десятки лет (0..9), мадшая тетрада - единицы лет (0..9)

			Init_DS1307
Подпрограмма служит для инициализации DS1307.
При инициализации проверяется флаг останова (7-й бит нулевого регистра).
Если флаг установлен в 1 (было отключение питания), то производится его сброс.
После вызова подпрограммы флаг Т содержит изначальное (до сброса) значение флага останова.

			Read_RAM_DS1307
Подпрограмма чтения данных из RAM 
Через регистр R16 передается номер ячейки RAM (0..55)
После выполнения подпрограммы в регистре R16 находятся данные
	
			rcall	Write_RAM_DS1307	
Подпрограмма записи данных в RAM
Через регистр R17 передается номер ячейки (0..55)
Через регистр R16 передаются данные для записи
*/


;#### БИБЛИОТЕКА ПРОТОКОЛА I2C ####
.include "I2C.inc"


;============== ПОЛЕЗНЫЕ МАКРООПРЕДЕЛЕНИЯ =====================
;Считывание 7 первых регистров DS1307 в 7 ячеек памяти данных. 
;Начальный адрес памяти данных указывается в аргументе
.macro		Read_7Byte_DS1307
			push	ZH
			push	ZL
			ldi		ZH,high(@0)
			ldi		ZL,low (@0)
			rcall	Read_Time
			pop		ZL
			pop		ZH
.endm

;Запись данных из 7 ячеек памяти данных в 7 первых регистров DS1307 
;Начальный адрес памяти данных указывается в аргументе
.macro		Write_7Byte_DS1307
			push	ZH
			push	ZL
			ldi		ZH,high(@0)
			ldi		ZL,low (@0)
			rcall	Write_Time
			pop		ZL
			pop		ZH
.endm



;=============== ОСНОВНЫЕ ПОДПРОГРАММЫ ========================

;#### ИНИЦИАЛИЗАЦИЯ ЧАСОВ DS1307 ####
Init_DS1307:rcall	Write_DS1307		;Перевод DS1307 на запись
			ldi		R16,0				;Адрес нулевого регистра, содержащего бит блокировки часов
			rcall	shout				;Отправка байта	адреса
			rcall	Read_DS1307			;Перевод DS1307 на чтение
			rcall	shin				;Чтение нулевого регистра, содержащего бит блокировки часов
			rcall	NAK					;Прекращение чтения
			rcall	stp					;СТОП-условие
			clt							;Отключения питания не было
			sbrs	R16,7				;Проверка 7 бита, блокирующего работу часов
			ret							;Если бит сброшен, то выходим из подпрограммы, а если установлен, то сбрасываем блокировку
			rcall	Write_DS1307		;СБРОС бита блокировки DS1307
			ldi		R16,0				;Адрес нулевого регистра, содержащего бит блокировки часов
			rcall	shout				;Отправка байта адреса
			rcall	shout				;Бит блокировки в нулевом регистре сброшен
			rcall	stp					;Прекращение записи и выход
			set							;Было отключение питания
			ret

;#### ЧТЕНИЕ ДАННЫХ ИЗ 7 РЕГИСТРОВ DS1307 В ЯЧЕЙКИ ПАМЯТИ ДАННЫХ МИКРОКОНТРОЛЛЕРА ####
Read_Time:	rcall	Write_DS1307		;Перевод DS1307 на запись
			ldi		R16,0				;Выбор нулевого регистра, содержащего значение секунд
			rcall	shout				;Отправка байта	адреса
			rcall	Read_DS1307			;Перевод DS1307 на чтение
			ldi		R17,6
RdTm:		rcall	shin				;Чтение массива данных, начиная с нулевого регистра, содержащего значение секунд
			rcall	ACK					;Подтверждение приема байта
			st		Z+,R16
			dec		R17
			brne	RdTm
			rcall	shin				;Чтение последнего 7-ого байта
			st		Z,R16				;Переписываем прочитанный байт в 7-ю ячейку
			rcall	NAK					;Завершаем чтение признаком неподтверждения nak
			rcall	stp					;И завершаем сессию stop-сигналом
			ret

;#### ЗАПИСЬ 7 БАЙТ ИЗ ПАМЯТИ ДАННЫХ МИКРОКОНТРОЛЛЕРА В РЕГИСТРЫ DS1307 ####
Write_Time:	rcall	Write_DS1307		;Перевод DS1307 на запись
			ldi		R16,0				;Выбор нулевого регистра, содержащего значение секунд
			rcall	shout				;Отправка байта	адреса
			ldi		R17,7				;Настройка счетчика на считывание из CLOCK 7-и байт
WrTm:		ld		R16,Z+				;Чтение байта из массива данных
			rcall	shout				;Запись байта из CLOCK в память часов
			dec		R17					;Уменьшаем значение счетчика, если не ноль, то
			brne	WrTm				;продолжение записи в память часов
			rcall	stp					;СТОП-условие. Окончание сессии.
			ret

;#### ЧТЕНИЕ ДАННЫХ ИЗ RAM ###
;Через регистр R16 передается номер ячейки RAM (т.е. адрес ячейки начинающийся с нуля до 55) 
;После выполнения подпрограммы в регистре R16 находяться данные из этой ячейки
Read_RAM_DS1307:	subi	R16,-0x08		;Адрес начала встроенной памяти RAM
					push	R16
					rcall	Write_DS1307	;Перевод DS1307 на запись
					pop		R16
					rcall	shout			;Отправка байта адреса
					rcall	Read_DS1307		;Перевод DS1307 на чтение
					rcall	shin			;Чтение ячейки данных
					rcall	NAK				;Прекращение чтения и выход
					rcall	stp	
					ret
		
;#### ЗАПИСЬ ДАННЫХ В RAM ####
;Через регистр R17 передается номер ячейки RAM (0..55)
;Через регистр R16 передаются данные для записи
Write_RAM_DS1307:	push	R16
					rcall	Write_DS1307	;Перевод DS1307 на запись
					mov		R16,R17
					subi	R16,-0x08		;Адрес начала встроенной памяти RAM
					rcall	shout			;Отправка байта адреса
					pop		R16
					rcall	shout			;Запись в ячейку данных
					rcall	stp				;Прекращение записи и выход
					ret

;ПЕРЕВОД DS1307 НА ЗАПИСЬ
Write_DS1307:	ldi		R16,0b11010000		;Адрес часов на запись
				rjmp	PC+2
;ПЕРЕВОД DS1307 НА ЧТЕНИЕ		
Read_DS1307:	ldi		R16,0b11010001		;Адрес часов на чтение
				rcall	str					;Start-условие
				rcall	shout				;Отправка байта адреса
				ret
				
