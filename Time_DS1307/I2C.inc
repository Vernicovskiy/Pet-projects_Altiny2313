/*				БИБЛИОТЕКА ПРОГРАМНОЙ ЭМУЛЯЦИИ ПРОТОКОЛА I2C

Библиотека реализует стандартный режим работы с 7-битовой адресацией
и скоростью обмена не более 100 кбит/с.

Использование библиотеки предполагает соблюдение двух условий:
1. Микроконтроллер – ведущее устройство
2. На линии находиться только одно ведущее устройство 

ПЕРЕД ИСПОЛЬЗОВАНИЕМ БИБЛИОТЕКИ ПРОИЗВЕСТИ СЛЕДУЮЩИЕ НАСТРОЙКИ:
1. ОПРЕДЕЛИТЬ ВЫВОДЫ ДАННЫХ И ТАКТИРОВАНИЯ I2C
2. ПРИ НЕОБХОДИМОСТИИ НАСТРОИТЬ ПОДПРОГРАММУ ВРЕМЕННОЙ ЗАДЕРЖКИ DELAY_I2C

						ЗАМЕЧАНИЯ
1. В библиотеке используются регистры R16 И R17
2. После вызова подпрограммы отправки байта shout, флаг Т регистра статуса
   будет установлен в соответствии с битом подтверждения от Slave-устройства
   (Т=0 - подтверждение, T=1 - неподтверждение)
3. После вызова подпрограммы формирования старт-условия str, флаг Т регистра статуса
   будет установлен в 1, если линия данных или линия синхронизации не установленна в 1
   (при занятой линии I2C или неготовности Slave-устройства к повторному старту)
*/

;#### НАЗНАЧЕНИЕ ВЫВОДОВ ПОД I2C ####
.equ	PORT_I2C=PORTB
.equ	PIN_I2C	=PINB
.equ	DDR_I2C	=DDRB
.equ	SDA	=1			;РАЗРЯД ПОРТА ПОД ЛИНИЮ ДАННЫХ
.equ	SCL	=0			;РАЗРЯД ПОРТА ПОД ЛИНИЮ ТАКТИРОВАНИЯ

;### ВременнАя задержка > 5 мкс ###
DELAY_I2C:	nop
			nop
			nop
			nop
			nop
			nop
			nop
			nop
			nop
			nop
			nop
			ret
			
;===================== МАКРООПРЕДЕЛЕНИЯ =============================
.macro	sbib						;ОТПУСКАНИЕ ЛИНИИ
		cbi		DDR_I2C,@0			;В начале устанавливаем вывод на вход, затем
		sbi		PORT_I2C,@0			;подключаем внутренний подтягивающий резистор
.endm
		
.macro	cbib						;ПОДСАДКА ЛИНИИ
		cbi		PORT_I2C,@0			;В начале сбрасываем вывод в ноль, затем
		sbi		DDR_I2C,@0			;переводим вывод на выход
.endm

;===================== РАБОЧИЕ ПОДПРОГРАММЫ =========================
;### ПОБИТНАЯ ПЕРЕДАЧА БАЙТА СТАРШИМ БИТОМ ВПЕРЕД ИЗ РЕГИСТРА R16 ###
shout:		push	R17
			ldi		R17,8		;Настраиваем счетчик отправленых битов
s1:			rol		R16			;7-ой бит в флаг С
			brcc	sda_lw		;переход на sda_lw, если С=0
			sbib	SDA			;Линия данных = 1
			rjmp	strb1		;На запись
sda_lw:		cbib	SDA			;Линия данных = 0
strb1:		rcall	strob_SCL	;Импульс записи
			dec		R17			;Уменьшаем счетчик отправленых битов
			brne	s1			;Если не последний бит, то переходим на s1
			rol		R16			;Сдвигаем R16, для сохранения в нем исходного значения
			sbib	SDA			;Передача 8 бит закончена. Проверка бита подтверждения от Slave
			rcall	DELAY_I2C	;Задержка
			sbib	SCL			;Начало тактового импульса ACK
			rcall	DELAY_I2C	;Задержка
			clt					;Предварительный сброс флага ошибок
			sbic	PIN_I2C,SDA	;Если SDA=0 (бит подтверждения от slave получен), то пропускаем установку флага ошибки
			set					;Установка флага ошибки
			cbib	SCL			;Конец тактового импульса ACK
			pop		R17
			ret

;### ПОБИТНЫЙ ПРИЕМ БАЙТА СТАРШИМ БИТОМ ВПЕРЕД В РЕГИСТР R16 ###
shin:		push	R17
			sbib	SDA			;Отпускаем линию данных
			ldi		R17,8		;Настраиваем счетчик принятых битов
h1:			rcall	DELAY_I2C	;Задержка
			sbib	SCL			;Начало тактового импульса
			rcall	DELAY_I2C	;Задержка
			clc					;Предварительный сброс принятого бита
			sbic	PIN_I2C,SDA	;Пропуск установки принятого бита, если SDA = 0
			sec					;Установка принятого бита
			rol		R16			;Сдвиг принятого бита из флага С в регистр R16
			cbib	SCL			;Конец тактового импульса
			dec		R17			;Уменьшаем счетчик принятых битов
			brne	h1			;Если не последний бит, то переходим на h1
			pop		R17
			ret

;### ФОРМИРОВАНИЕ СИГНАЛОВ ПОДТВЕРЖДЕНИЯ И НЕПОДТВЕРЖДЕНИЯ ###
ACK:		cbib	SDA			;Формирование сигнала подтверждения
			rjmp	strb2		
NAK:		sbib	SDA			;Формирование сигнала НЕподтверждения
strb2:		rcall	strob_SCL	;Импульс записи
			ret
		
;### СТАРТ УСЛОВИЕ ###
str:		sbib	SDA			;Отпускаем линию данных
			sbib	SCL			;Отпускаем линию синхронизации
			set					;Предварительная установка флага ошибки
			sbis	PIN_I2C,SDA	;Если линия данных занята, то
			ret					;выход из подпрограммы с ошибкой
			sbis	PIN_I2C,SCL	;Если линия синхронизации занята, то
			ret					;выход из подпрограммы с ошибкой
			clt					;Сброс флага ошибки
			cbib	SDA			;Подсаживаем линию данных
			rcall	DELAY_I2C	;Задержка
			cbib	SCL			;Подсаживаем линию синхронизации
			ret
	
;### СТОП УСЛОВИЕ С КОНТРОЛЕМ ЛИНИИ СИНХРОНИЗАЦИИ ###
stp:		cbib	SDA			;Подсаживаем линию данных
			rcall	DELAY_I2C	;Задержка
			sbib	SCL			;Отпускаем линию синхронизации
			sbis	PIN_I2C,SCL	;Если линия синхронизации занята, то
			rjmp	PC-1		;slave еще не готов
			rcall	DELAY_I2C	;Задержка
			sbib	SDA			;Отпускаем линию данных
			ret

;###  ТАКТОВЫЙ ИМПУЛЬС С КОНТРОЛЕМ ЛИНИИ СИНХРОНИЗАЦИИ ###
strob_SCL:	rcall	DELAY_I2C	;Задержка
			sbib	SCL			;Начало тактового импульса
			sbis	PIN_I2C,SCL	;Если линия синхронизации занята, то
			rjmp	PC-1		;slave еще не готов
			rcall	DELAY_I2C	;Задержка
			cbib	SCL			;Окончание тактового импульса
			ret
