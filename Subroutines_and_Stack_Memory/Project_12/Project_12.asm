.include "tn2313def.inc"

.def	temp	=R16
.def	loop	=R17

;Назначаем названия регистрам порта со светодиодом
.equ	PORT_LED	=PORTD
.equ	PIN_LED		=PIND
.equ	DDR_LED		=DDRD

;Назначаем названия регистрам порта с кнопкой
.equ	PORT_SB		=PORTB
.equ	DDR_SB		=DDRB
.equ	PIN_SB		=PINB

.equ	SB			=3	;Задаем осмысленное имя разряду порта, куда подключается кнопка
.equ	LED			=6	;Задаем осмысленное имя разряду порта, куда подключается светодиод

.cseg
.org	0x00

		ldi		temp,low(RAMEND)	;Загрузили в регистр temp адрес конечной ячейки памяти данных
		out		SPL,temp			;В младший байт регистра SP (Stack Point) загрузили младший байт
									;адреса конечной ячейки памяти данных

;ДЛЯ МИКРОКОНТРОЛЛЕРОВ AVR СЕМЕЙСТВА MEGA, ИМЕЮЩИХ БОЛЬШУЮ ПАМЯТЬ ДАННЫХ, НЕОБХОДИМО
;ПРОПИСЫВАТЬ ЗНАЧЕНИЕ И ДЛЯ СТАРШЕГО БАЙТА РЕГИСТРА SP (Stack Point) 
;(Для адресации памяти данных используется 2 байта)
	;	ldi		temp,high(RAMEND)	
	;	out		SPH,temp			;В старший байт регистра SP загрузили старший байт
									;адреса конечной ячейки памяти данных
		
;Пример работы со стеком
		ldi		temp,0x11
		push	temp		;Положили в стек значение из регистра temp. Указатель стека уменьшился на 1
		ldi		temp,0x22	;Изменяем значение в регистре temp
		push	temp		;Снова кладем в стек значение temp
		ldi		temp,0x33	;Изменяем значение в регистре temp
		push	temp		;Снова кладем в стек значение temp
		clr		temp		;Сбрасываем значение temp, что бы был виден результат следующей операции
		pop		temp		;Вынимаем значение из стека и записываем в temp. Указатель стека увеличился на 1
		pop		temp		;Вынимаем значение из стека и записываем в temp. Указатель стека увеличился на 1
		pop		temp		;Снова вынимаем значение из стека и записываем в temp. Указатель стека 
							;увеличился на 1 и стал равным константе RAMEND

;Еще один пример работы со стеком
;Поменяли местами значения в регистрах temp и loop
		ldi		loop,0x50
		ldi		temp,0x90
		push	temp		;В стек поместили значение 0х90
		push	loop		;В стек поместили значение 0х50
		pop		temp		;Извлекли из стека значение 0х50 и поместили в temp 
		pop		loop		;Извлекли из стека значение 0х90 и поместили в loop

		nop
		nop

		rcall	delay		;Вызов подпрограммы delay

;##############################
;ПРИМЕР РАБОТЫ С ПОДПРОГРАММАМИ
;##############################
/*
ОПИСАНИЕ:
По нажатию кнопки SB, переключать состояние светодиода
*/
		clr		temp
		out		DDR_SB,temp		;Переводим весь порт на вход
		ser		temp
		out		PORT_SB,temp	;И включаем подтягивающие резисторы

		ser		temp
		out		DDR_LED,temp	;Переводим весь порт на выход
		clr		temp		
		out		PORT_LED,temp	;Устанавливаем везде логические нули



MAIN:	sbic	PIN_SB,SB	;Ждем момента, когда кнопка будет нажата
		rjmp	main
		rcall	delay		;Вызов подпрограммы задержки.
							;Как только обнаруживается значение 0, ставим задержку 
							;против дребезга контактов. 
		sbi		PIN_LED,LED	;Записью в PIND меняем состояние вывода на противоположное
m1:		sbis	PIN_SB,SB	;Ждем момента, когда кнопка будет отпущена
		rjmp	m1
		rcall	delay		;Вызов подпрограммы задержки
		rjmp	main


;#####################################
;ПОДПРОГРАММА ВРЕМЕННоЙ ЗАДЕРЖКИ delay
;#####################################
;При вызове подрограммы, значение адрес (содержимое счетчика программ РС), 
;откуда прерывание было вызвано, помещается в стек
delay:	ldi		loop,0x10
d1:		ldi		temp,0xFF
d2:		dec		temp		;Уменьшаем значение temp
		nop					;Колличеством команд nop так же можно менять 
		nop					;величину временнОй задержки
		brne	d2			;Проверяем, не достигло ли значение temp нуля
		dec		loop		;Уменьшаем значение loop
		brne	d1			;Проверяем, не достигло ли значение loop нуля
		ret				;Команда ret вытаскивает из стека сохраненный адрес
						;и записывает его в счетчик программ РС (Program Counter), 
						;перенаправляя программу в то место, откуда произошел 
						;вызов подпрограммы

