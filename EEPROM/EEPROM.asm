/*			Пример работы со встроенной памятью EEPROM.

При включении питания считывается значение ячейки памяти EEPROM с адресом adrEEP. 
Прочитанное значение записывается в порт В.
При нажати на кнопку SB содержимое считанной ячейки памяти увеличивается на 1 и 
записывается в память EEPROM по тому же адресу. 
После записи происходит чтение и вывод значение прочитанной ячейки в порт В

Всего в микроконтроллере ATtiny2313 128 байт EEPROM-памяти.

Микроконтроллер:	ATtiny2313
Тактовая частота:	1 MHz
*/
.include "tn2313def.inc"

.def	temp	=R16
.def	adr		=R17
.def	count	=R18	;Счетчик нажатий

.equ	adrEEP	=0x10	;Адрес ячейки в EEPROM

.equ	SB		=1		;Номер разряда порта D, где будет кнопка



;############### СЕГМЕНТ ПАМЯТИ EEPROM ###############
.eseg
.db		0x55	;По нулевому адресу записываем 0х55
.db		0x66	;По адресу 0х01 записываем 0х66

.org	0x10	;Указатель на адрес 0х10
.db		0x55	;В байте по адресу 0х10 записано 0x55
.db		0xBB	;В байте по адресу 0х11 записано 0xBB
.dw		0x1122	;По адресу 0х12 записано 0x22, а по адресу 0х13 - 0х11
.dw		0x3344	;По адресу 0х14 записано 0x44, а по адресу 0х15 - 0х33

CellEpr:	.byte	2 ;Под ячейку CellEpr отведено 2 байта (адрес 0х16 0х17)
.db		0x99	;Этот байт расположен по адресу 0х18

.org	0x20
.db		'S'
.db		"Hello, ?!@#$%^&*()_+=/."



;############### СЕГМЕНТ ПАМЯТИ ПРОГРАММ ###############
.cseg	ldi		temp,RAMEND			;Инициализируем (настраиваем) стек
		out		SPL,temp

;К порту В подключены 8 светодиодов
		ser		temp				;Весь порт В на выход
		out		DDRB,temp
		clr		temp				;На всех выводах - нули
		out		PORTB,temp

;К порту D подключена кнопка SB
		clr		temp				;Весь порт D на вход
		out		DDRD,temp
		ser		temp				;Ко всем выводам подключены подтягивающие резисторы
		out		PORTD,temp

		rcall	Read_Data_to_PORT	;Чтение из ячейки EEPROM и запись в порт


		
;########## ОСНОВНОЙ ЦИКЛ ##########
MAIN:	sbic	PIND,SB				;Ожидание, пока кнопка не окажется нажатой
		rjmp	MAIN
		rcall	Delay				;Задержка против дребезга контактов
		inc		count				;Увеличиваем значение счетчика на 1
		mov		temp,count			;Переписываем значение счетчика в temp
		rcall	Write_Data			;и отправляем на запись
		rcall	Read_Data_to_PORT	;Тут же считываем записанное значение и выводим в порт
		sbis	PIND,SB				;Ждем, момента, когда кнопка будет отпущена
		rjmp	PC-1
		rcall	Delay				;Задержка против дребезга контактов
		rjmp	MAIN


;Чтение из EEPROM и запись в порт В
Read_Data_to_PORT:
				ldi		adr,adrEEP	;Указываем адрес ячейки из которой считаем байт
				rcall	EEPR_Read	;Вызываем подпрограмму чтения
				mov		count,temp	;Переписываем прочитанное значение в счетчик
				out		PORTB,temp	;Выводим прочитанный байт в порт
				ret

;Запись в EEPROM
Write_Data:		ldi		adr,adrEEP	;В adr заносим адрес той ячейки, в которую запишем байт
				rcall	EEPR_Write	;Вызываем подпрограмму записи
				ret


;###############################################
;############### ЗАПИСЬ В EEPROM ###############
;###############################################
;Адрес ячейки EEPROM передается через adr. 
;Данные для записи передаются через temp
;EECR - регистр управления
;EEAR - регистр адреса (в него записывается адрес ячейки EEPROM при чтении или записи)
;EEDR - регистр данных (при записи: в него записываются данные для записи)
;					   (при чтении: из него считываются данные) 
EEPR_Write:	sbic	EECR,EEPE	;EEPE - первый бит регистра управления EECR. 
			rjmp	EEPR_Write	;Если бит EEPE установлен в 1, значит предыдущая запись еще не завершена

			out		EEAR,adr	;В регистр адреса EEAR записываем адрес ячейки EEPROM
			out		EEDR,temp	;В регистр данных EEDR записываем данные
			
;Если между этими командами произойдет прерывание, то на его обработку затратиться больше 4 тактов	
			cli					;ЗАПРЕТ ПРЕРЫВАНИЙ
			sbi		EECR,EEMPE	;бит EEMPE - флаг управления разрешением записи
;Для активации процесса записи, необходимо в течение 4 тактов, после установки EEMPE, установить бит EEPE
			sbi		EECR,EEPE	
;После завершения записи бит EEPE сбросится АВТОМАТИЧЕСКИ
			reti				;РАЗРЕШЕНИЕ ПРЕРЫВАНИЙ и выход из подпрограммы


;################################################
;############### ЧТЕНИЕ ИЗ EEPROM ###############
;################################################
;Адрес передается через adr. 
;Данные после считывания помещаются в temp
EEPR_Read:	sbic	EECR,EEPE	;EEPE - первый бит регистра управления EECR. 
			rjmp	EEPR_Read	;Если бит EEPE установлен в 1, то предыдущий процесс записи
								;еще не завершен. Ожидаем его завершения.
			out		EEAR,adr	;В регистр адреса EEAR записываем адрес ячейки EEPROM
			sbi		EECR,EERE	;Начать чтение (EERE - флаг управления разрешением чтения)
			in		temp,EEDR	;Прочитанные данные помещаем в temp
			ret


;Подпрограмма временнОй задержки
Delay:		ldi		adr,0xA0
d1:			ldi		temp,0xFF
			dec		temp
			brne	PC-1
			dec		adr
			brne	d1
			ret
