/*
ПРИМЕР РАБОТЫ МОДУЛЯ USART С ИСПОЛЬЗОВАНИЕМ ПРЕРЫВАНИЙ

ОПИСАНИЕ:
Программа запоминает поток байтов в оперативной памяти.
Если программа встречает среди принятых байтов байт 0x0D (клавиша ввод),
то начинается процесс обратной передачи байтов.

Скорость:				9600 Бит/с
Размер слова данных:	8 бит
Кол-во стоп битов:		1
Четность:				НЕТ

Микроконтроллер		ATtiny2313
Тактовая частота	8 MHz
*/ 
.include "tn2313def.inc"

.def	temp		=R16
.def	count		=R17	;Счетчик байтов

.equ	XTALL	=8000000				;Тактовая частота в ГЕРЦАХ
.equ	BAUD	=9600					;Скорость обмена данными в бит/с
.equ	SPEED	=(XTALL/(16*BAUD))-1	;Коэфициент деления для получения 
										;заданой скорости обмена
.dseg
.org	0x60
mem:	.byte	0	;Для хранения принятых байтов используется память данных 

.cseg
.org	0x00
			rjmp	start
.org	0x07
			rjmp	RX_OK		;Прерывание USART прием завершен
.org	0x09		
			rjmp	TX_OK		;Прерывание USART передача завершена

.org	0x20
start:		ldi		temp,RAMEND
			out		SPL,temp
			
			ldi		temp,high(SPEED)		;Запись делителя для задания желаемой 
			out		UBRRH,temp				;скорости обмена
			ldi		temp,low(SPEED)
			out		UBRRL,temp

			ldi		temp,(1<<UCSZ1|1<<UCSZ0)	;Выбор размера слова данных 8 бит
			out		UCSRC,temp

			;Разрешение приема (RXEN) и передачи (TXEN).
			;Разрешение прерывания по завершению приема (RXCIE)
			;Разрешение прерывания по завершению передачи (TXCIE)
			ldi		temp,(1<<RXEN|1<<TXEN|1<<RXCIE|1<<TXCIE)		
			out		UCSRB,temp
			
			clr		count			;Очищаем счетчик байтов (РОН после включения питания не обнуляются)

		;	rcall	End_Tx			;Ниже следующие три команды можно было бы заменить вот такой командой

			ldi		XH,high(mem)	;Подготавливаем регистры для записи в память данных
			ldi		XL,low (mem)
			sei						;Глобальное разрешение прерываний

;### ГЛАВНЫЙ ЦИКЛ ###
main:		rjmp	main

		
;### ПРЕРЫВАНИЕ ПРИЕМ ЗАВЕРШЕН ###
RX_OK:		in		temp,UDR	;Считываем принятый байт
			cpi		temp,0x0D	;Сравнение принятого байта с байтом "возврат каретки (CR)"
			breq	Translate	;Если была нажата клавиша ввода, то переходим на передачу
			inc		count		;Если нет, то увеличиваем счетчик принятых байтов
			st		X+,temp		;И записываем принятый байт в память данных
			reti				
Translate:	ldi		XH,high(mem);Подготавливаемся к передачи байт из памяти данных
			ldi		XL,low (mem);И переходим на подпрограмму передачи байт
			
;### ПРЕРЫВАНИЕ ПЕРЕДАЧА ЗАВЕРШЕНА ###
TX_OK:		tst		count		;Проверяем счетчик на равенство нулю
			breq	End_Tx		;Если равен, то завершаем передачу
			ld		temp,X+		;Если не равен, то вытаскиваем байт из памяти данных
			out		UDR,temp	;И отправляем
			dec		count		;Уменьшаем счетчик отправленых байт
			reti
End_Tx:		ldi		XH,high(mem);Завершаем цикл передачи подготовкой к следующему циклу
			ldi		XL,low (mem)	
			reti
