.include "tn2313def.inc"

.def	temp	=R16
		
		ldi		temp,0x55

		push	temp
		push	temp
		push	temp
		push	temp

		pop		temp
		pop		temp
		pop		temp
		pop		temp

	;	rcall	sub_1				;Вызов подпрограммы при неинициализированном стеке

		ldi		temp,0xB4			;В качестве вершины стека выбрана ячейка 0xB4
		out		SPL,temp

		push	R16
		push	R17
		pop		R16
		pop		R17

		rcall	sub_1

		ldi		temp,low (RAMEND)	;В ATtiny2313 достаточно загрузить данные только в SPL
		out		SPL,temp			
		ldi		temp,high(RAMEND)	;Но не будет ошибкой, если загрузить данные в неиспользуемый регистр 0х3Е
		out		0x3E,temp	

					
	;	rjmp	Pr_1		
		rjmp	Pr_3
		rjmp	m5
	
		
;ПРИМЕР 1. Переход по адресу m1 с использованием адреса из стековой памяти
		ldi		temp,low (m1)
		push	temp			;В ячейку 0xDF записываем младший байт адреса метки m1 и уменьшаем на 1 указатель стека
		ldi		temp,high(m1)
		push	temp			;В ячейку 0xDF записываем старший байт адреса метки m1 и уменьшаем на 1 указатель стека

		ret						;Извлечение адреса из стека и переход на метку m1

		nop
		nop
		nop
		nop
		
;ПРИМЕР 2. Переход по адресу m2 с использованием адреса из стековой памяти
m1:		ldi		temp,low (m2)
		sts		RAMEND,temp		;В ячейку памяти данных по адресу 0xDF записываем младший байт адреса метки m2
		ldi		temp,high(m2)
		sts		RAMEND-1,temp	;В ячейку памяти данных по адресу 0xDE записываем младший байт адреса метки m2
		
		ldi		temp,RAMEND-2	;Записывает в указатель стека адрес 0xDD
		out		SPL,temp

		ret						;Извлечение адреса из стека и переход на метку m2

		nop
		nop
		nop
		nop

;ПРИМЕР 1. Переход по адресу 0x41 с использованием адреса из стековой памяти
m2:		ldi		R16,0x5F
		out		0x3D,R16		;Устанавливаем вершину стека на адрес 0x5F
		clr		R16
		sts		0x60,R16		;Записываем в ячейки стека адрес возврата
		ldi		R16,0x41
		sts		0x61,R16
		ret						;Переход на адрес 0x41 в программной памяти



;Нарушение стековой памяти при использовании подпрограмм:
Pr_1:	rcall	Prog_1		;Вызвыаем подпрограмму Prog_1
Pr_2:	rcall	Prog_2		;Вызвыаем подпрограмму Prog_2
Pr_3:	rcall	Prog_3		;Вызвыаем подпрограмму Prog_3


Prog_1:	ldi		temp,0x22
		push	temp		;Значение регистра temp положили в стек, но забыли оттуда достать
		ret					;Теперь команда ret вернет в счетчик PC неверный адрес возврата
		 
Prog_2:	clr		ZH
		ldi		ZL,RAMEND	;В регистр Z загружаем адрес памяти данных, содержащей данные стека
		st		Z,temp		;Запись в область памяти данных, содержащей данные стековой памяти
		ret					;Теперь команда ret запишет в счетчик PC неверный адрес возврата

Prog_3:	in		temp,SPL
		inc		temp
		out		SPL,temp
		ret


m3:		ldi		temp,RAMEND
		out		SPL,temp
		ldi		ZL,low (sub_1)
		ldi		ZH,High(sub_1)
		icall
		rcall	m4


sub_1:	nop
		nop
		ret


m4:		pop		ZH			;Вынимаем адрес возврата из стека и переписываем в регистр Z
		pop		ZL
		sbiw	ZL,1		;Уменьшаем адрес на 1
		icall				;Команда косвенного вызова подпрограммы. Происходит переход по адресу в регистре Z
							;Адрес в регистре Z - это адрес команды rcall m4

m5:		rcall	PC			;Пример вызова подпрограммы по адресу команды вызова подпрограммы

m6:	;	call	sub_1		;Такая команда поддерживается только в микроконтроллерах семейства Mega




