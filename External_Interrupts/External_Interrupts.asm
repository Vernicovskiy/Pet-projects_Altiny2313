/*
	ПРИМЕР ИСПОЛЬЗОВАНИЯ ПРЕРЫВАНИЙ МИКРОКОНТРОЛЛЕРА

Вывод PD3 порта D совмещен с внешним прерыванием INT1
Вывод PD2 порта D совмещен с внешним прерыванием INT0

При нажатии на кнопку PD3 светодиод загорается
При нажатии на кнопку PD2 светодиод гаснет
При любом изменении состояния выводов 7, 5 и 0 порта В светодиод загорается

Микроконтроллер:	 ATtiny2313
Тактовая частота:	 1 MHz
*/


.include "tn2313def.inc"

.def	temp	=R16
.def	loop	=R17
.def	FLAGS	=R18	;Регистр флагов. Часто используется для работы с событиями

;Присвоение имен для разрядов регистра флагов FLAGS
.equ	VD_SW	=0		;Флаг состояния светодиода

;Назначение имени выводу порта, к которому подключен светодиод
.equ	VD		=PB1

.cseg	
.org	0x00			;Эту директиву, указывающую ассемблеру, на 
						;нулевой адрес начала программы, писать необязательно


;Программа, после сброса микроконтроллера, свое выполнение всегда начинает с нулевого адреса (0х00)


		rjmp	init	;(0х00) Переход на инициализацию (начальную настройку)


;Начиная с адреса 0х01 распологаются вектора прерываний
		rjmp	Intr_0	;(0х01) Внешнее прерывание 0
		rjmp	Intr_1	;(0х02) Внешнее прерывание 1
		reti			;(0х03) Захват таймера/счетчика Т1
		reti		    ;(0х04) Совпадение А таймера/счетчика Т1
		reti			;(0х05) Переполнение таймера/счетчика Т1
		reti        	;(0х06) Переполнение таймера/счетчика Т0
		reti			;(0х07) USART, прием завершен
		reti			;(0х08) Регистр данных USART пуст
		reti			;(0х09) USART, передача завершена
		reti			;(0х0A) Прерывание по компаратору
		rjmp	Intr_1	;(0х0B) Прерывание по изменению на любом контакте
		reti			;(0х0C) Совпадение В таймера/счетчика Т1
		reti			;(0х0D) Совпадение А таймера/счетчика Т0
		reti			;(0х0E) Совпадение В таймера/счетчика Т0
		reti			;(0х0F) USI Стартовая готовность
		reti			;(0х10) USI Переполнение
		reti			;(0х11) EEPROM Готовность
		reti			;(0х12) Переполнение сторожевого таймера

;Вместо команд reti можно поставить команды nop.
;Команду reti в некоторых случаях можно рассматривать как 
;более надежную команду, чем nop. Если в результате сбоя произойдет
;вызов прерывания, то по команде reti оно тут же будет завершено.





;Допускается так же запись таблицы в сокращенном виде:
/*
.org	0x01
		rjmp	Intr_0	;(0х01) Внешнее прерывание 0
.org	0x02
		rjmp	Intr_1	;(0х02) Внешнее прерывание 1

;Но такая запись считается менее надежной и менее наглядной для отладки 

;Если произойдет прерывание "Регистр данных USART пуст", то программа 
;перейдет по соответствующему адресу 0х08. Так как до адреса 
;0х0B никаких команд нет, то никаких действий выполняться не будет. 
;В результате программа дойдет до адреса 0x0B и выполнит 
;переход "rjmp	Intr_1"

.org	PCIaddr			;(0х0B) Прерывание по изменению на любом контакте
		rjmp	Intr_1	

.org	ACIaddr			;(0x000a) Адрес прерывания от аналогового компаратора
		reti

.org	OVF0addr		;(0x0006) Переполнение таймера 0
		nop
*/



;Если вы не помните адрес, где заканчиваются вектора прерываний, то можно выбрать адрес начала программы равным 0х40:
;.org	0x40




.org	INT_VECTORS_SIZE		;Начало программы, сразу после таблицы векторов прерываний




;Инициализация (настройка) стека, портов ввода-вывода и других функций и модулей
init:	ldi		temp,(RAMEND)	
		out		SPL,temp		;Инициализация стека


;Переводим все выводы порта D на вход и включаем подтягивающие резисторы
		clr		temp
		out		DDRD,temp
		ser		temp
		out		PORTD,temp
;Переводим все выводы порта B на выход
		ser		temp
		out		DDRB,temp
		out		PORTB,temp


;##################################################################################
;								НАСТРОЙКА ПРЕРЫВАНИЙ
;##################################################################################
;ДЛЯ ВКЛЮЧЕНИЯ ПРЕРЫВАНИЙ НЕОБХОДИМО СДЕЛАТЬ ДВА ДЕЙСВИЯ:
; 1 - НАСТРОИТЬ ПРЕРЫВАНИЯ
; 2 - РАЗРЕШИТЬ ПРЕРЫВАНИЯ


; 1 - НАСТРОЙКА УСЛОВИЯ СРАБАТЫВАНИЯ ВНЕШНЕГО ПРЕРЫВАНИЯ
;Биты ISC11 и ISC10 регистра MCUCR определяют условие прерывания для вывода INT1
;ISC11 = 1 и ISC10 = 1 Прерывание по наростающему фронту сигнала (с 0 на 1)
;ISC11 = 1 и ISC10 = 0 Прерывание по спадпющему фронту сигнала (с 1 на 0)
;ISC11 = 0 и ISC10 = 1 Прерывание при любом изменении сигнала
;ISC11 = 0 и ISC10 = 0 Прерывание по низкому уровню сигнала (лог. 0)

;Биты ISC01 и ISC00 регистра MCUCR определяют условие прерывания для вывода INT0
;ISC01 = 1 и ISC00 = 1 Прерывание по наростающему фронту сигнала (с 0 на 1)
;ISC01 = 1 и ISC00 = 0 Прерывание по спадпющему фронту сигнала (с 1 на 0)
;ISC01 = 0 и ISC00 = 1 Прерывание при любом изменении сигнала
;ISC01 = 0 и ISC00 = 0 Прерывание по низкому уровню сигнала (лог. 0)

;Включено прерывание по наростающему фронту (c 0 на 1)(при ОТПУСКАНИИ кнопки)
		ldi		temp,(1<<ISC01|1<<ISC00|1<<ISC11|1<<ISC10)	
		out		MCUCR,temp

;Разрешение прерывания по изменению на выводах 7, 5 и 0 порта В
		ldi		temp,(1<<PCINT7|1<<PCINT5|1<<PCINT0)
		out		PCMSK,temp


; 2 - РАЗРЕШЕНИЕ ПРЕРЫВАНИЯ

		ldi		temp,(1<<INT1|1<<INT0|1<<PCIE)	;Разрешение внешнего прерывания INT1, INT0, PCIE
		out		GIMSK,temp

;##################################################################################




		sei		;Установкой флага i регистра SREG, разрешается работа всех прерываний.
				;Команда sei только разрешает работу прерываний. Для работы прерываний
				;каждое из них необходимо отдельно настраивать и включать.
				;ПОСЛЕ ВКЛЮЧЕНИЯ ПИТАНИЯ, ФЛАГ I СБРОШЕН, ТО ЕСТЬ ВСЕ ПРЕРЫВАНИЯ
				;ЗАПРЕЩЕНЫ





;Основной цикл
main:	sbrs	FLAGS,VD_SW	;Пропускаем команду, если флаг установлен
		rjmp	VD_ON
VD_OFF:	cbi		PORTB,VD	;Гасим светодиод
		rjmp	main
VD_ON:	sbi		PORTB,VD	;Зажигаем светодиод
		rjmp	main





;Подпрограмма обработки внешнего прерывания INT1 и PCIE
Intr_1:	push	temp		;Сохраняем в стеке значение temp
	;	push	SREG		;ОШИБКА! Регистр статуса нельзя сохранять таким способом
		in		temp,SREG	;Сначала переписываем значение в temp, затем сохраняем
		push	temp		;Сохраняем регистр статуса

		cbr		FLAGS,(1<<VD_SW)	;Сброс бита VD_SW регистра флагов FLAGS
;Разумеется, можно было написать сразу cbi	PORTB,VD
;Такое усложнение введено намерено, что бы наглядно показать, как работать 
;с флагами

	;	pop		SREG		;ОШИБКА! Регистр статуса нельзя восстанавливать таким способом
		pop		temp		;Восстанавливаем регистр статуса
		out		SREG,temp	;Восстанавливаем регистр статуса
		pop		temp		;Восстанавливаем регистр temp

		reti				;команда завершения прерывания
;Обратите внимание, что при вызове прерывания флаг I регистра SREG 
;автоматически сбрасывается, запрещая таким образом вызов других прерываний
;пока не закончится текущее.
;Команда reti состоит как бы из двух команд: ret (возврат из подпрограммы) 
;и sei (установка флага I), которые выполняются одновременно.






;Подпрограмма обработки внешнего прерывания INT0
Intr_0:	in		R5,SREG
		
		sbr		FLAGS,(1<<VD_SW)	;Установка бита VD_SW регистра флагов FLAGS

		sei							;Теперь прерывания будут разрешены 

		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop	
		
		cli							;Прерывания вновь запрещены

		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop	

		sei							

		nop							;Выполняются все накопленные прерывания
		nop
		nop
		nop	

		cli

		nop
		nop
		nop
		nop	
		nop
		nop
		nop
		nop	
;Если в момент обработки текущего прерывания возникнет новое прерывание, то по завершению
;текущего прерывания произойдет переход на обработку нового прерывания. Переход произойдет не 
;мгновенно, а только после выполнения одной команды основной программы.

;Для сброса флагов прерываний, необходимо записать в регистры флагов прерываний ЛОГИЧЕСКИЕ ЕДИНИЦЫ
		

		ser		temp
		out		EIFR,temp			;сброшены все флаги внешних прерываний
									;GIFR = EIFR
		sei	

		nop
		nop
		nop
		nop	

		sbi		DDRD,PD3
		cbi		PORTD,PD3
		sbi		PORTD,PD3			;Программный вызов прерывания

		nop
		nop
		nop
		nop	 

		cli

		out		SREG,R5
		ret							;Возврат из прерывания без установки флага I
